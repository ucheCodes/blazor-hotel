@page "/dialog"
@inject IRoomControl rc
@inject IStore store
@inject IPaystackControl pc
@inject IKitchenControl kc
@inject GetSecrets secrets
@inject NavigationManager navigationManager
@inject SignalRService signalR
@inject INotificationControl nc
@inject IMailService mailService

@if (Show)
{
    <section class="dialog">
        <div class="container">
            <span @onclick="Close" class="close">x</span>
            <span class="msg @msgClass">@message</span>
            <input @onfocusout="(() => IsEmailValid(Email))" @bind="Email" placeholder="kindly supply email address" type="email"/>
            <input @onfocusout="(() => IsMobileValid(Mobile))" @bind="Mobile" placeholder="kindly supply mobile number" type="text" />
            <select @bind="quantity">
                <option value="1">select quantity</option>
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
            </select>
            <button hidden="@hideDialogBtn" @onclick="Pay" class="main-btn">Pay &#8358;@(Amount * quantity)</button>
        </div>
    </section>
}


@code {
    [Parameter]
    public bool Show { get; set; } = true;
    [Parameter]
    public string KitchenId { get; set; } = "";
    public string Email { get; set; } = "";
    public string Mobile { get; set; } = "";
    [Parameter]
    public int Amount { get; set; }
    public string Link { get; set; } = "";
    int quantity = 1;
    string message = "Supply informations to complete transaction";
    string msgClass = "";
    bool hideDialogBtn = false;
    string domainName = "";
    private HubConnection? hubConnection => signalR.HubConnection;
    protected override void OnInitialized()
    {
        if (store.State().ActiveUser?.User != new Users())
        {
            Email = store.State().ActiveUser?.User.Email ?? "";
            Mobile = store.State().ActiveUser?.User.Mobile ?? "";
        }
        var uri = new Uri(navigationManager.Uri);
        domainName = uri.Host;
    }
    private void Close()
    {
        Show = false;
    }
    private void Pay()
    {
        if (IsEmailValid(Email) && IsMobileValid(Mobile))
        {
            PaystackCheckout();
        }
        else
        {
            message = "Email and / or Mobile fields must not be empty";
            msgClass = "red";
        }
    }
    private void AddDataToDatabase(KitchenOrder order)
    {
        var isAdded = kc.AddKitchenOrder(order);
        if (isAdded.Result)
        {
            //Notifications message
            string notifMsg = $"A meal was ordered by a client with email {order.Email} and mobile {order.Mobile}";
            bool is4Admin = true;
            string department = "kitchen";
            var isNotified = nc.AddNotification(notifMsg, is4Admin, department);
            if (isNotified.Result)
            {
                hubConnection.SendAsync("Notify", "A new notification is added");
            }
            order = new();
        }
    }
    private async void PaystackCheckout()
    {
        var paystackPublicKey = secrets.OnGet("keys", "paystack-public-key");
        var paystackSecretKey = secrets.OnGet("keys", "paystack-secret-key");
        message = "Authorizing Transaction, please wait ...";
        hideDialogBtn = true;
        var paystackData = await pc.Checkout(Email, (Amount * quantity), paystackPublicKey, paystackSecretKey);
        if (paystackData is Newtonsoft.Json.Linq.JObject && !string.IsNullOrEmpty(paystackData.ToString()) && paystackData.status == true)
        {
            var d = paystackData.data;
            string paystackAuthorizationUrl = d.authorization_url;
            string paystackAccessCode = d.access_code;
            string paystackReference = d.reference;
            navigationManager.NavigateTo(paystackAuthorizationUrl);

            PaystackTransaction pt = new()
                {
                    Url = paystackAuthorizationUrl,
                    AccessCode = paystackAccessCode,
                    Reference = paystackReference,
                    Department = "kitchen",
                    TransactionId = KitchenId,
                    Date = DateTime.Now,
                    IsVerified = false,
                    Mobile = Mobile
                };
            AddPayTrans(pt);
            Show = false;
        }
        else
        {
            message = "Transaction failed to authorize! Try again!!!";
            msgClass = "red";
        }
    }
    private async void AddPayTrans(PaystackTransaction pt)
    {
        var isAdded = pc.AddPaystackTransaction(pt);

        if (isAdded.Result)
        {
            string foodDomain = $"{domainName}/booked-meal";//get domain from uri
            string hotelEmail = secrets.OnGet("keys", "email");
            string mailBody = $"<p>A client with email address {Email} and mobile {Mobile} with PayStack's reference Id {pt.Reference} ordered a meal. </p><p>Click <a href=\"https://{foodDomain}\">{foodDomain}</a> to view and execute</p>";
            //mail for clients
            await mailService.Send("peters.soft.network@gmail.com", Email, "New Food Order received at " + domainName, mailBody);
            //for hotel
            if (!string.IsNullOrEmpty(hotelEmail))
                await mailService.Send("peters.soft.network@gmail.com", hotelEmail, "New food Order received at " + domainName, $"A meal was ordered by user with email: {Email}, kindly verify payment and execute.");
        }
        KitchenOrder order = new KitchenOrder()
            {
                Id = Guid.NewGuid().ToString(),
                KitchenId = KitchenId,
                Email = Email,
                Mobile = Mobile,
                Reference = pt.Reference,
                Date = DateTime.Now,
                Amount = Amount,
                Quantity = quantity
            };
        AddDataToDatabase(order);
    }


    private bool IsEmailValid(string email)
    {
        string pattern = @"^([\w\.\-]+)@([\w\-]+)((\.(\w){2,3})+)$";
        Regex regex = new Regex(pattern);
        var isEmailValid = regex.IsMatch(email);
        if (isEmailValid)
        {
            message = "email is valid";
            msgClass = "green";
        }
        else
        {
            message = "email field is invalid, email must be in the form abc@xyz.com";
            msgClass = "red";
        }
        return isEmailValid;
    }
    private bool IsMobileValid(string mobile)
    {
        bool isMobileValid = false;
        if (!string.IsNullOrEmpty(mobile))
        {
            string pattern = @"^(?:\+?\d{1,3})?(?:0|\d{1,4})\d{10}$";
            Regex regex = new Regex(pattern);
            if (mobile.Contains("+") || (!mobile.Contains("+") && mobile.Length == 11 && mobile.StartsWith("0")))
            {
                isMobileValid = regex.IsMatch(mobile);
                if (!isMobileValid)
                {
                    message = "Mobile must have max of 14 characters \n" +
                        "It may include '+' sign, country code and mobile digits";
                    msgClass = "red";
                }
                else
                {
                    message = "Mobile number is valid";
                    msgClass = "green";
                }
            }
            else
            {
                message = "Mobile number is not in a correct format";
                msgClass = "red";
            }
        }
        return isMobileValid;
    }
}
